diff --git modules/payment/src/Exception/DeclineException.php modules/payment/src/Exception/DeclineException.php
index 80c585d6..4e42009f 100644
--- modules/payment/src/Exception/DeclineException.php
+++ modules/payment/src/Exception/DeclineException.php
@@ -14,4 +14,28 @@ namespace Drupal\commerce_payment\Exception;
  * @see \Drupal\commerce_payment\Exception\HardDeclineException
  * @see \Drupal\commerce_payment\Exception\SoftDeclineException
  */
-class DeclineException extends PaymentGatewayException {}
+class DeclineException extends PaymentGatewayException {
+
+  /**
+   * Constructs a new DeclineException object.
+   *
+   * @param string|null $message
+   *   The exception message that will be logged by the application.
+   * @param int $code
+   *   A user defined exception code.
+   * @param \Exception $previous
+   *   The previous exception if we have a nested exception.
+   * @param string|null $display_message
+   *   The message that will be displayed to the application's user.
+   */
+  public function __construct($message = NULL, $code = 0, \Exception $previous = NULL, $display_message = NULL) {
+    // Add a default display message here so that it doesn't have to be
+    // hardcoded in many places in the code.
+    if (!$display_message) {
+      $display_message = $this->t('We encountered an error processing your payment method. Please verify your details and try again.');
+    }
+
+    parent::__construct($message, $code, $previous, $display_message);
+  }
+
+}
diff --git modules/payment/src/Exception/PaymentGatewayException.php modules/payment/src/Exception/PaymentGatewayException.php
index 9c015cce..0a417e58 100644
--- modules/payment/src/Exception/PaymentGatewayException.php
+++ modules/payment/src/Exception/PaymentGatewayException.php
@@ -2,7 +2,54 @@
 
 namespace Drupal\commerce_payment\Exception;
 
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+
 /**
  * Base exception for all payment gateway errors.
  */
-class PaymentGatewayException extends \RuntimeException {}
+class PaymentGatewayException extends \RuntimeException {
+
+  use StringTranslationTrait;
+
+  /**
+   * A custom message that will be displayed to the application's user.
+   *
+   * @var string
+   */
+  protected $displayMessage;
+
+  /**
+   * Constructs a new DeclineException object.
+   *
+   * @param string|null $message
+   *   The exception message that will be logged by the application.
+   * @param int $code
+   *   A user defined exception code.
+   * @param \Exception $previous
+   *   The previous exception if we have a nested exception.
+   * @param string|null $display_message
+   *   The message that will be displayed to the application's visitor.
+   */
+  public function __construct($message = NULL, $code = 0, \Exception $previous = NULL, $display_message = NULL) {
+    parent::__construct($message, $code, $previous);
+
+    // Add a default display message here so that it doesn't have to be
+    // hardcoded in many places in the code.
+    if (!$display_message) {
+      $display_message = $this->t('We encountered an unexpected error processing your payment method. Please try again later.');
+    }
+
+    $this->displayMessage = $display_message;
+  }
+
+  /**
+   * Returns the message that will be displayed to the application's user.
+   *
+   * @return string
+   *   The display message.
+   */
+  public function getDisplayMessage() {
+    return $this->displayMessage;
+  }
+
+}
diff --git modules/payment/src/Plugin/Commerce/CheckoutPane/PaymentProcess.php modules/payment/src/Plugin/Commerce/CheckoutPane/PaymentProcess.php
index 8333e564..113697f1 100644
--- modules/payment/src/Plugin/Commerce/CheckoutPane/PaymentProcess.php
+++ modules/payment/src/Plugin/Commerce/CheckoutPane/PaymentProcess.php
@@ -174,13 +174,13 @@ class PaymentProcess extends CheckoutPaneBase {
         $this->checkoutFlow->redirectToStep($next_step_id);
       }
       catch (DeclineException $e) {
-        $message = $this->t('We encountered an error processing your payment method. Please verify your details and try again.');
-        $this->messenger->addError($message);
+        \Drupal::logger('commerce_payment')->error($e->getMessage());
+        $this->messenger->addError($e->getDisplayMessage());
         $this->checkoutFlow->redirectToStep($error_step_id);
       }
       catch (PaymentGatewayException $e) {
         \Drupal::logger('commerce_payment')->error($e->getMessage());
-        $message = $this->t('We encountered an unexpected error processing your payment method. Please try again later.');
+        $this->messenger->addError($e->getDisplayMessage());
         $this->messenger->addError($message);
         $this->checkoutFlow->redirectToStep($error_step_id);
       }
@@ -217,8 +217,7 @@ class PaymentProcess extends CheckoutPaneBase {
       }
       catch (PaymentGatewayException $e) {
         \Drupal::logger('commerce_payment')->error($e->getMessage());
-        $message = $this->t('We encountered an unexpected error processing your payment. Please try again later.');
-        $this->messenger->addError($message);
+        $this->messenger->addError($e->getDisplayMessage());
         $this->checkoutFlow->redirectToStep($error_step_id);
       }
     }
